/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.dnltsk.mapfileplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.dnltsk.mapfileplugin.psi.MapfileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Mapfile.flex</tt>
 */
public class MapfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\12\1\13\3\12"+
    "\1\14\3\12\1\15\24\12\1\16\1\17\1\20\10\1\1\21\1\22\1\12\1\23\4\12\1\24\10"+
    "\12\1\25\12\12\1\26\1\12\1\27\1\26\1\12\1\30\4\1\1\12\1\31\1\32\2\1\2\12\1"+
    "\31\1\1\1\33\1\26\5\12\1\34\1\35\1\36\1\1\1\37\1\12\1\1\1\40\5\12\1\41\1\42"+
    "\1\43\1\12\1\31\1\44\1\12\1\45\1\46\1\1\1\12\1\47\4\1\1\12\1\50\4\1\1\51\2"+
    "\12\1\52\1\1\1\53\1\17\1\26\1\54\1\55\1\56\1\57\1\60\1\61\2\17\1\62\1\55\1"+
    "\56\1\63\1\1\1\64\1\1\1\65\1\66\1\23\1\56\1\67\1\1\1\70\1\17\1\71\1\72\1\55"+
    "\1\56\1\67\1\1\1\61\1\17\1\42\1\73\1\74\1\75\1\76\1\1\1\70\2\1\1\77\1\37\1"+
    "\56\1\52\1\1\1\100\1\17\1\1\1\77\1\37\1\56\1\101\1\1\1\60\1\17\1\102\1\77"+
    "\1\37\1\12\1\103\1\60\1\104\1\17\1\43\1\105\1\106\1\12\1\107\1\110\3\1\1\26"+
    "\2\12\1\111\1\110\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\70\3\1\1\120"+
    "\1\12\1\121\1\1\1\122\7\1\2\12\1\31\1\104\1\1\1\123\1\124\1\125\1\126\1\1"+
    "\2\12\1\127\2\12\1\130\24\12\1\131\1\132\2\12\1\131\2\12\1\133\1\134\1\13"+
    "\3\12\1\134\3\12\1\31\2\1\1\12\1\1\5\12\1\135\1\26\45\12\1\136\1\12\1\137"+
    "\1\31\4\12\1\31\1\140\1\141\1\17\1\12\1\17\1\12\1\17\1\141\1\70\3\12\1\142"+
    "\1\1\1\143\4\1\5\12\1\30\2\12\1\144\4\12\1\41\1\12\1\145\3\1\1\12\1\146\1"+
    "\50\2\12\1\147\1\12\1\76\3\1\1\12\1\110\3\12\1\50\4\1\1\150\5\1\1\105\2\12"+
    "\1\142\1\151\3\1\1\152\1\12\1\153\1\43\2\12\1\41\1\1\2\12\1\142\1\1\1\40\1"+
    "\43\1\12\1\146\6\1\1\154\1\155\14\12\4\1\21\12\1\135\2\12\1\135\1\156\1\12"+
    "\1\146\3\12\1\157\1\160\1\161\1\121\1\160\1\162\1\1\1\163\2\1\1\164\1\1\1"+
    "\165\1\1\1\121\6\1\1\166\1\167\1\170\1\171\1\172\3\1\1\173\147\1\2\12\1\145"+
    "\2\12\1\145\10\12\1\174\1\175\2\12\1\127\3\12\1\176\1\1\1\12\1\110\4\177\4"+
    "\1\1\104\35\1\1\200\2\1\1\201\1\26\4\12\1\202\1\26\4\12\1\130\1\105\1\12\1"+
    "\146\1\26\4\12\1\145\1\1\1\12\1\31\3\1\1\12\40\1\133\12\1\41\4\1\135\12\1"+
    "\41\2\1\10\12\1\121\4\1\2\12\1\146\20\12\1\121\1\12\1\203\1\1\2\12\1\145\1"+
    "\104\1\12\1\146\4\12\1\41\2\1\1\204\1\205\5\12\1\206\1\12\1\146\1\30\3\1\1"+
    "\204\1\207\1\12\1\32\1\1\3\12\1\142\1\205\2\12\1\142\3\1\1\210\1\43\1\12\1"+
    "\41\1\12\1\110\1\1\1\12\1\121\1\51\2\12\1\32\1\104\1\1\1\211\1\212\2\12\1"+
    "\47\1\1\1\213\1\1\1\12\1\214\3\12\1\215\1\216\1\217\1\31\1\65\1\220\1\221"+
    "\1\177\2\12\1\130\1\41\7\12\1\32\1\1\72\12\1\142\1\12\1\222\2\12\1\147\20"+
    "\1\26\12\1\146\6\12\1\76\2\1\1\110\1\223\1\56\1\224\1\225\6\12\1\17\1\1\1"+
    "\152\25\12\1\146\1\1\4\12\1\205\2\12\1\30\2\1\1\147\7\1\1\211\7\12\1\121\2"+
    "\1\1\26\1\31\1\26\1\31\1\226\4\12\1\145\1\227\1\230\2\1\1\231\1\12\1\13\1"+
    "\232\2\146\2\1\7\12\1\31\30\1\1\12\1\121\3\12\1\70\2\1\2\12\1\1\1\12\1\233"+
    "\2\12\1\41\1\12\1\146\2\12\1\234\3\1\11\12\1\146\6\1\2\12\1\30\3\12\1\142"+
    "\11\1\23\12\1\110\1\12\1\41\1\30\11\1\1\235\2\12\1\236\1\12\1\41\1\12\1\110"+
    "\1\12\1\145\4\1\1\12\1\237\1\12\1\41\1\12\1\76\4\1\3\12\1\240\4\1\1\70\1\241"+
    "\1\12\1\142\2\1\1\12\1\121\1\12\1\121\2\1\1\120\1\12\1\50\1\1\3\12\1\41\1"+
    "\12\1\41\1\12\1\32\1\12\1\17\6\1\4\12\1\47\3\1\3\12\1\32\3\12\1\32\60\1\1"+
    "\152\2\12\1\30\4\1\1\152\2\12\2\1\1\12\1\47\1\1\1\152\1\12\1\110\2\1\2\12"+
    "\1\242\1\152\2\12\1\32\1\243\1\244\2\1\1\12\1\23\1\147\5\1\1\245\1\246\1\47"+
    "\2\12\1\145\2\1\1\72\1\55\1\56\1\67\1\1\1\247\1\17\21\1\3\12\1\1\1\250\13"+
    "\1\2\12\1\145\2\1\1\251\2\1\3\12\1\1\1\252\3\1\2\12\1\31\5\1\1\12\1\76\30"+
    "\1\4\12\1\1\1\104\34\1\3\12\1\47\20\1\71\12\1\76\16\1\14\12\1\142\53\1\2\12"+
    "\1\145\75\1\44\12\1\110\33\1\43\12\1\47\1\12\1\145\7\1\1\12\1\146\1\1\3\12"+
    "\1\1\1\142\1\1\1\152\1\253\1\12\67\1\4\12\1\50\1\70\3\1\1\152\6\1\1\17\77"+
    "\1\6\12\1\31\1\121\1\47\1\76\66\1\5\12\1\211\3\12\1\141\1\254\1\255\1\256"+
    "\3\12\1\257\1\260\1\12\1\261\1\262\1\37\24\12\1\263\1\12\1\37\1\130\1\12\1"+
    "\130\1\12\1\211\1\12\1\211\1\145\1\12\1\145\1\12\1\56\1\12\1\56\1\12\1\213"+
    "\3\1\14\12\1\50\123\1\1\256\1\12\1\264\1\265\1\266\1\267\1\270\1\271\1\272"+
    "\1\147\1\273\1\147\24\1\55\12\1\110\2\1\103\12\1\50\15\12\1\146\150\12\1\17"+
    "\25\1\41\12\1\146\36\1");

  /* The ZZ_CMAP_A table has 3008 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\24\1\14\1\3\3\0\1\12\1\17\1\20\1\22\1\21\1\0\1\4"+
    "\1\6\1\23\12\5\1\0\1\15\1\0\1\16\3\0\1\26\1\52\1\36\1\32\1\30\1\46\1\47\1"+
    "\54\1\45\1\50\1\60\1\33\1\25\1\31\1\43\1\27\1\56\1\35\1\40\1\42\1\41\1\51"+
    "\1\11\1\53\1\34\1\55\1\0\1\13\2\0\1\10\1\27\1\56\1\35\1\40\1\42\1\41\1\51"+
    "\1\11\1\53\1\34\1\55\12\0\1\1\12\0\1\2\11\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7"+
    "\1\0\10\7\2\44\35\7\1\37\2\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0"+
    "\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10"+
    "\0\6\7\1\0\26\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\33\0\6\7\1\0\1\7\17\0\2"+
    "\7\7\0\2\7\12\0\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\30\0\6\7\4\0\2\7\4"+
    "\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7"+
    "\2\0\1\7\7\0\11\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1"+
    "\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0"+
    "\4\7\1\0\1\7\3\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30"+
    "\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1"+
    "\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0\4\7\1\0\5\7"+
    "\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0"+
    "\1\7\2\0\7\7\11\0\1\7\1\0\2\7\15\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0"+
    "\5\7\1\0\1\7\25\0\14\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7"+
    "\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7"+
    "\2\0\6\7\2\0\15\7\2\0\1\7\1\2\17\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0"+
    "\1\7\3\0\11\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16"+
    "\7\15\0\2\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\13\2\15\0\2\1\5\0"+
    "\1\2\17\0\1\2\1\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6"+
    "\0\1\7\1\0\1\7\1\0\1\7\1\0\1\57\3\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2"+
    "\7\13\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\1\0\1\2\4\0\2\7\12"+
    "\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\0\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7"+
    "\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\0\5\7\1\0\3\7"+
    "\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7"+
    "\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10"+
    "\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6"+
    "\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0"+
    "\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1"+
    "\0\12\7\3\0\1\7\12\0\4\7\25\0\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7"+
    "\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0"+
    "\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1"+
    "\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\10\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1"+
    "\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1"+
    "\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\21\6\1\5\1\0\1\17\3\0\2\6\1\0\20\6"+
    "\1\0\7\6\1\0\5\6\1\0\6\6\1\20\1\0"+
    "\3\6\1\0\3\6\1\0\1\6\1\21\20\6\1\0"+
    "\1\6\1\0\7\6\2\0\6\6\1\0\3\6\1\0"+
    "\1\6\1\0\3\6\2\22\1\0\4\6\2\0\5\6"+
    "\1\0\3\6\1\23\1\24\1\6\1\25\3\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\2\26\1\6\1\0"+
    "\2\6\1\27\1\6\1\30\1\6\2\0\2\6\1\0"+
    "\1\6\1\0\3\6\1\0\3\6\2\31\2\32\1\0"+
    "\2\6\1\0\4\6\2\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\33\1\34\1\6\1\0\1\6\2\35\1\0"+
    "\6\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\36\2\6\1\36\1\0\1\6\2\37\2\6\1\0"+
    "\2\6\1\40\1\0\2\6\1\0\4\6\2\0\2\6"+
    "\2\41\1\0\2\6\1\0\1\6\1\0\1\6\1\42"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\1\0\3\6\2\43\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\3\0\3\6\1\0\2\6"+
    "\1\44\2\45\1\6\1\0\1\6\1\46\1\0\4\6"+
    "\2\0\2\6\1\0\2\6\1\0\1\6\1\0\2\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\2\47\1\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\50\2\51\1\6\1\0\2\6\1\52\2\0"+
    "\1\52\2\6\2\53\1\54\1\0\2\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\55\2\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\56\1\6\1\0"+
    "\3\6\1\0\1\6\2\57\2\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\60\1\0\2\6\1\0\1\61\1\6\1\61\1\0"+
    "\2\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\2\62\1\63\1\0\1\63\1\6"+
    "\2\64\1\0\1\6\1\0\1\6\2\65\2\66\2\67"+
    "\1\70\2\71\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\2\6\2\72\2\73"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\74\2\75\2\76\1\0\2\6\2\77\1\0\1\6"+
    "\2\100\1\0\1\6\2\101\2\102\1\0\1\103\1\6"+
    "\1\103\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\2\104\2\105\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\2\106\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\2\107\2\110\1\0\1\6\1\0\1\6"+
    "\2\111\1\0\1\6\2\112\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\2\113\1\0"+
    "\1\6\1\0\1\6\2\114\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\61\0\61\0\61\0\61\0\304\0\61\0\61"+
    "\0\61\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u0157\0\61\0\u052b\0\u0188\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0126\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0126\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\61\0\u0126\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u0126\0\u0126\0\u1a9b\0\u0126\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\61\0\u0126\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u0126\0\u1e3e\0\u0126\0\u1e6f\0\u1ea0\0\u1ed1"+
    "\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059"+
    "\0\u208a\0\u20bb\0\u20ec\0\u211d\0\61\0\u0126\0\61\0\u0126"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u0126\0\u0126\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\61\0\u2989\0\u29ba"+
    "\0\u0126\0\u29eb\0\u2a1c\0\61\0\u0126\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\u0126\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06"+
    "\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\61"+
    "\0\u0126\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4"+
    "\0\u0126\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193"+
    "\0\u31c4\0\u31f5\0\61\0\u0126\0\u3226\0\u3257\0\u3288\0\u32b9"+
    "\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441"+
    "\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9"+
    "\0\u0126\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u0126\0\u36ef"+
    "\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff"+
    "\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87"+
    "\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\61\0\u0126\0\u3c7c\0\u3cad"+
    "\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u0126"+
    "\0\61\0\u0126\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\61\0\u3ef9"+
    "\0\u3f2a\0\u0126\0\u3f5b\0\u3f8c\0\61\0\u0126\0\u0126\0\u3fbd"+
    "\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145"+
    "\0\u4176\0\u0126\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c"+
    "\0\u42cd\0\u42fe\0\u432f\0\u4360\0\61\0\u0126\0\u4391\0\u43c2"+
    "\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7\0\61\0\u0126\0\u44e8"+
    "\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670"+
    "\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u0126\0\u4796\0\u47c7"+
    "\0\u47f8\0\u4829\0\61\0\u485a\0\u0126\0\u488b\0\u48bc\0\u48ed"+
    "\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\61"+
    "\0\u0126\0\61\0\u4d85\0\u0126\0\u4db6\0\61\0\u0126\0\u4de7"+
    "\0\u4e18\0\u4e49\0\u4e7a\0\61\0\u0126\0\61\0\u0126\0\61"+
    "\0\u0126\0\u4eab\0\61\0\u0126\0\u4edc\0\u4f0d\0\u4f3e\0\u4f6f"+
    "\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095\0\u50c6\0\u50f7"+
    "\0\u5128\0\u5159\0\u518a\0\61\0\u0126\0\61\0\u0126\0\u51bb"+
    "\0\u51ec\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u0126"+
    "\0\61\0\u0126\0\u5343\0\u5374\0\u53a5\0\u53d6\0\u5407\0\61"+
    "\0\u0126\0\u5438\0\u5469\0\61\0\u0126\0\u549a\0\u54cb\0\61"+
    "\0\u0126\0\61\0\u0126\0\u54fc\0\61\0\u552d\0\u0126\0\u555e"+
    "\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5\0\u56e6"+
    "\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db\0\u580c\0\u583d\0\u586e"+
    "\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5\0\u59f6"+
    "\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c\0\u5b4d\0\u5b7e"+
    "\0\u5baf\0\u5be0\0\61\0\u0126\0\61\0\u0126\0\u5c11\0\u5c42"+
    "\0\u5c73\0\u5ca4\0\u5cd5\0\u5d06\0\61\0\u0126\0\u5d37\0\u5d68"+
    "\0\u5d99\0\u5dca\0\u5dfb\0\u5e2c\0\61\0\u0126\0\61\0\u0126"+
    "\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\61\0\u0126\0\u5f21\0\u5f52"+
    "\0\61\0\u0126\0\u5f83\0\u5fb4\0\u5fe5\0\u6016\0\u6047\0\u6078"+
    "\0\u60a9\0\u60da\0\u610b\0\u613c\0\61\0\u0126\0\u616d\0\u619e"+
    "\0\u61cf\0\u6200\0\61\0\u0126\0\61\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\2"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\7\1\30\1\31\2\32\1\33"+
    "\1\34\1\35\2\7\1\36\1\37\1\40\1\41\2\7"+
    "\1\42\4\7\62\0\2\3\56\0\1\4\1\0\57\4"+
    "\5\0\1\6\60\0\1\6\1\43\57\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\12\44\1\45\1\46\45\44\13\47\1\50\1\45"+
    "\44\47\5\0\1\7\2\0\2\7\13\0\1\7\1\51"+
    "\1\7\1\52\6\7\1\0\4\7\1\53\1\54\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\6\7"+
    "\1\55\1\7\1\56\1\7\1\0\3\7\1\57\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\60\5\7\1\0\4\7\1\0\6\7\1\61"+
    "\3\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\62\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\1\7\1\63"+
    "\1\7\1\64\6\7\1\0\1\7\1\65\2\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\66\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\67"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\6\7\1\70\3\7\1\0"+
    "\3\7\1\71\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\7\7\1\72\2\7\1\0\2\7"+
    "\1\73\1\7\1\74\1\75\11\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\76\5\7\1\0"+
    "\2\7\1\77\1\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\100\3\7\1\101"+
    "\1\102\1\7\1\0\3\7\1\103\1\104\1\105\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\4\7\1\0\1\7\1\106\10\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\107\1\7"+
    "\1\110\6\7\1\0\3\7\1\111\1\112\1\113\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\114\4\7\1\115\1\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\3\7\1\116\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\117\10\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\120\6\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\43\53\0\1\44\1\0"+
    "\57\44\1\47\1\0\57\47\5\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\121\7\7\1\122\1\123\3\7\1\0"+
    "\6\7\1\124\3\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\2\7\1\125\1\7\1\0"+
    "\12\7\1\0\1\7\31\0\1\126\34\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\127\5\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\1\7\1\130\2\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\3\7\1\131\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\132\1\133\3\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\5\7\1\134\3\7\1\135\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\2\7\1\136\1\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\137\11\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\2\7\1\140\1\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\4\7\1\0\5\7\1\141\4\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\1\142\11\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\7\7\1\143\2\7\1\0\4\7"+
    "\1\0\5\7\1\144\4\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\0\11\7"+
    "\1\145\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\146\10\7\1\0\1\7\1\147\2\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\150\3\7\1\151\5\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\1\152"+
    "\11\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\153\5\7\1\154"+
    "\2\7\1\0\4\7\1\0\12\7\1\0\1\7\55\0"+
    "\1\155\10\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\10\7\1\156\1\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\4\7\1\157"+
    "\1\160\11\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\0\1\7\1\161\10\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\1\162"+
    "\11\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\2\7\1\163\7\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\164\10\7\1\0\1\7\1\165"+
    "\2\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\166\3\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\33\0\1\167\6\0\1\170\23\0"+
    "\1\7\2\0\2\7\13\0\6\7\1\171\3\7\1\0"+
    "\2\7\1\172\1\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\4\7\1\0"+
    "\1\7\1\173\10\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\174\3\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\175\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\3\7\1\176\1\0\12\7\1\0\1\7\33\0\1\177"+
    "\32\0\1\7\2\0\2\7\13\0\6\7\1\200\3\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\3\7\1\201\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\3\7\1\202\1\203\1\204\11\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\205\1\206\11\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\207\3\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\210\10\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\57\0\2\211\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\0\12\7\1\211\1\212"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\213\1\214"+
    "\3\7\1\0\1\7\1\215\1\216\7\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\217\10\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\37\0\2\220"+
    "\6\0\1\221\16\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\220\1\222\3\7\1\0\2\7\1\223\7\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\2\7\1\224\7\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\11\7\1\225\1\0\4\7"+
    "\1\0\3\7\1\226\6\7\1\0\1\7\42\0\1\227"+
    "\23\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\230\1\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\3\7\1\231\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\232\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\233"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\234\10\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\1\7\1\235\2\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\2\7\1\236\7\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\237"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\240\6\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\1\7\1\241\2\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\242\1\243\3\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\244\1\245"+
    "\3\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\2\7\1\246\7\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\247\5\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\5\7\1\250\4\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\2\7\1\251"+
    "\1\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\252\3\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\30\0\1\253\35\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\254\6\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\42\0\1\255\23\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\2\7\1\256\1\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\5\7\1\257\4\7\1\0\4\7\1\260\1\261\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\262\7\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\3\7\1\263\6\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\264\5\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\265\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\266\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\30\0\1\267\63\0\1\270\32\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\271\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\6\7"+
    "\1\272\3\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\273\1\274"+
    "\3\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\275\1\276\3\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\2\7\1\277\1\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\300\1\7\1\0\12\7\1\0\1\7\42\0\1\301"+
    "\23\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\302\1\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\303\11\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\1\7\1\304\2\7\1\0\12\7\1\0"+
    "\1\7\32\0\1\305\33\0\1\7\2\0\2\7\13\0"+
    "\5\7\1\306\4\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\31\0\1\307\34\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\310\5\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\311\1\312\11\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\5\7\1\313\4\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\36\0\1\314\27\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\315\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\316\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\317"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\5\7\1\320\4\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\36\0\1\321\52\0"+
    "\1\322\35\0\1\7\2\0\2\7\13\0\11\7\1\323"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\324\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\325\1\326\11\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\327"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\330\6\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\33\0\1\331\32\0"+
    "\1\7\2\0\2\7\13\0\6\7\1\332\3\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\333\4\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\334\5\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\2\7\1\335\7\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\336\1\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\337\3\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\4\7\1\340\1\341\11\7\1\0\1\7"+
    "\37\0\2\342\25\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\342\1\343\3\7\1\0\12\7\1\0\1\7\42\0"+
    "\1\344\23\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\2\7\1\345\1\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\3\7\1\346"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\347\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\3\7\1\350\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\1\7\1\351"+
    "\2\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\352\6\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\41\0\1\353\24\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\1\7\1\354\2\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\355\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\42\0\1\356\23\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\2\7\1\357\1\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\6\7\1\360"+
    "\3\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\361\1\362\3\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\10\7\1\363\1\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\37\0\2\364\3\0\2\365\43\0\1\366"+
    "\35\0\1\7\2\0\2\7\13\0\12\7\1\364\1\367"+
    "\3\7\1\365\1\370\11\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\371\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\44\0\2\372\20\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\372\1\373"+
    "\11\7\1\0\1\7\30\0\1\374\35\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\375\6\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\1\7\1\376\2\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\377"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\30\0"+
    "\1\u0100\35\0\1\7\2\0\2\7\13\0\3\7\1\u0101"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\2\7\1\u0102"+
    "\1\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\2\7\1\u0103\7\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\32\0\1\u0104\33\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0105\4\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0106\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\26\0\1\u0107\37\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\u0108\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\1\7\1\u0109"+
    "\10\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\3\7\1\u010a"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\u010b\10\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\26\0\1\u010c\75\0\1\u010d\22\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\u010e\10\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\3\7\1\u010f\1\0\12\7\1\0"+
    "\1\7\31\0\1\u0110\34\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\u0111\5\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\u0112"+
    "\1\u0113\3\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\u0114\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\26\0\1\u0115\37\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\u0116\10\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\4\7\1\u0117\1\u0118\11\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\u0119\1\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\u011a\7\7\1\u011b\1\u011c\1\0"+
    "\4\7\1\u011d\1\u011e\11\7\1\0\1\7\35\0\1\u011f"+
    "\30\0\1\7\2\0\2\7\13\0\10\7\1\u0120\1\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\44\0\2\u0121"+
    "\1\0\1\u0122\16\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\4\7\1\u0121\1\u0123\1\7\1\u0124\7\7\1\0"+
    "\1\7\30\0\1\u0125\35\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0126\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\u0127"+
    "\1\u0128\3\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\u0129\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\6\7\1\u012a\3\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\u012b"+
    "\1\u012c\3\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\u012d\1\u012e"+
    "\11\7\1\0\1\7\31\0\1\u012f\34\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u0130\5\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\2\7\1\u0131\1\7\1\0\12\7\1\0"+
    "\1\7\30\0\1\u0132\35\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0133\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\1\7\1\u0134"+
    "\10\7\1\0\4\7\1\0\12\7\1\0\1\7\46\0"+
    "\1\u0135\17\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\1\7\1\u0136\10\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\u0137\10\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\35\0\1\u0138\54\0"+
    "\1\u0139\10\0\1\u013a\23\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\u013b\1\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\4\7\1\u013c"+
    "\5\7\1\0\2\7\1\u013d\1\7\1\0\12\7\1\0"+
    "\1\7\42\0\1\u013e\23\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\2\7\1\u013f\1\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\10\7\1\u0140"+
    "\1\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\u0141\1\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\35\0\1\u0142\30\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\u0143\1\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\10\7\1\u0144\1\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\26\0\1\u0145\37\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\u0146\10\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\u0147\1\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\33\0\1\u0148\32\0\1\7\2\0\2\7\13\0"+
    "\6\7\1\u0149\3\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\2\7\1\u014a\1\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\1\7\1\u014b\13\0\12\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\2\7\1\u014c\1\7\1\0\12\7"+
    "\1\0\1\7\33\0\1\u014d\36\0\1\u014e\54\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\u014f\3\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\1\7"+
    "\1\u0150\13\0\12\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\37\0\2\u0151\25\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\u0151\1\u0152\3\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\u0153\1\7\1\0\12\7\1\0\1\7\52\0\1\u0154"+
    "\13\0\1\7\2\0\2\7\13\0\12\7\1\0\4\7"+
    "\1\0\5\7\1\u0155\4\7\1\0\1\7\31\0\1\u0156"+
    "\34\0\1\7\2\0\2\7\13\0\4\7\1\u0157\5\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\u0158\10\7\1\0\4\7"+
    "\1\u0159\1\u015a\11\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\u015b\6\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\u015c\10\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\42\0\1\u015d\23\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\2\7\1\u015e\1\7\1\0\12\7\1\0"+
    "\1\7\30\0\1\u015f\35\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0160\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\42\0\1\u0161\53\0\1\u0162\30\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\2\7\1\u0163\1\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\u0164\1\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\35\0\1\u0165\30\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\u0166\1\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\44\0\2\u0167\20\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\4\7\1\u0167\1\u0168\11\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\u0169\1\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u016a\1\u016b\3\7\1\0"+
    "\12\7\1\0\1\7\42\0\1\u016c\23\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\2\7\1\u016d\1\7\1\0"+
    "\12\7\1\0\1\7\44\0\2\u016e\20\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\4\7\1\u016e\1\u016f\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\1\7"+
    "\1\u0170\10\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\25\0\1\u0171\40\0\1\7\2\0\2\7\13\0\1\u0172"+
    "\11\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\2\7\1\u0173"+
    "\1\7\1\0\12\7\1\0\1\7\43\0\1\u0174\22\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\3\7\1\u0175"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\4\7\1\u0176\5\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\37\0\2\u0177\52\0\1\u0178\56\0\1\u0179"+
    "\35\0\1\7\2\0\2\7\13\0\12\7\1\u0177\1\u017a"+
    "\3\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u017b\4\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u017c\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\30\0\1\u017d\35\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u017e\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u017f"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\44\0"+
    "\2\u0180\20\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\u0180\1\u0181\11\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\u0182\10\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\42\0\1\u0183\23\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\2\7\1\u0184\1\7"+
    "\1\0\12\7\1\0\1\7\30\0\1\u0185\35\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0186\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\1\7\1\u0187\2\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\4\7\1\u0188\1\u0189\11\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\u018a\10\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\30\0\1\u018b\74\0"+
    "\2\u018c\20\0\1\7\2\0\2\7\13\0\3\7\1\u018d"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\4\7\1\u018c"+
    "\1\u018e\11\7\1\0\1\7\44\0\2\u018f\20\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\u018f\1\u0190"+
    "\11\7\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\4\7\1\u0191\1\u0192\11\7\1\0\1\7"+
    "\30\0\1\u0193\35\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\u0194\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\47\0\1\u0195\16\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\4\7\1\0\2\7\1\u0196\7\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\4\7"+
    "\1\0\6\7\1\u0197\3\7\1\0\1\7\31\0\1\u0198"+
    "\34\0\1\7\2\0\2\7\13\0\4\7\1\u0199\5\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\0\11\7"+
    "\1\u019a\1\0\1\7\5\0\1\7\2\0\2\7\13\0"+
    "\11\7\1\u019b\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\30\0\1\u019c\35\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\u019d\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\37\0\2\u019e\25\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\u019e\1\u019f\3\7\1\0\12\7\1\0\1\7\30\0"+
    "\1\u01a0\73\0\1\u01a1\22\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u01a2\6\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\3\7\1\u01a3\1\0\12\7\1\0\1\7\42\0\1\u01a4"+
    "\23\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\u01a5\1\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\4\7\1\u01a6\1\u01a7"+
    "\11\7\1\0\1\7\36\0\1\u01a8\27\0\1\7\2\0"+
    "\2\7\13\0\11\7\1\u01a9\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\30\0\1\u01aa\35\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\u01ab\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\42\0\1\u01ac\23\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\2\7\1\u01ad\1\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\u01ae\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\35\0\1\u01af\30\0\1\7\2\0\2\7\13\0\10\7"+
    "\1\u01b0\1\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\11\7\1\u01b1\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\30\0\1\u01b2\55\0"+
    "\1\u01b3\40\0\1\7\2\0\2\7\13\0\3\7\1\u01b4"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\u01b5\11\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\42\0\1\u01b6\23\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\2\7\1\u01b7\1\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\4\7\1\u01b8\5\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\44\0\2\u01b9\20\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\u01b9\1\u01ba\11\7\1\0"+
    "\1\7\32\0\1\u01bb\33\0\1\7\2\0\2\7\13\0"+
    "\5\7\1\u01bc\4\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\10\7\1\u01bd"+
    "\1\7\1\0\4\7\1\0\12\7\1\0\1\7\32\0"+
    "\1\u01be\33\0\1\7\2\0\2\7\13\0\5\7\1\u01bf"+
    "\4\7\1\0\4\7\1\0\12\7\1\0\1\7\32\0"+
    "\1\u01c0\60\0\1\u01c1\33\0\1\7\2\0\2\7\13\0"+
    "\5\7\1\u01c2\4\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\5\0\1\7\2\0\2\7\13\0\5\7\1\u01c3"+
    "\4\7\1\0\4\7\1\0\12\7\1\0\1\7\31\0"+
    "\1\u01c4\34\0\1\7\2\0\2\7\13\0\4\7\1\u01c5"+
    "\5\7\1\0\4\7\1\0\12\7\1\0\1\7\43\0"+
    "\1\u01c6\22\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\3\7\1\u01c7\1\0\12\7\1\0\1\7\33\0\1\u01c8"+
    "\32\0\1\7\2\0\2\7\13\0\6\7\1\u01c9\3\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u01ca\1\u01cb\3\7\1\0"+
    "\12\7\1\0\1\7\37\0\2\u01cc\25\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u01cc\1\u01cd\3\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\1\7\1\u01ce\2\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\4\7"+
    "\1\0\7\7\1\u01cf\2\7\1\0\1\7\25\0\1\u01d0"+
    "\40\0\1\7\2\0\2\7\13\0\1\u01d1\11\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\25\0\1\u01d2\74\0"+
    "\1\u01d3\24\0\1\7\2\0\2\7\13\0\1\u01d4\11\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\1\7\1\u01d5\2\7"+
    "\1\0\12\7\1\0\1\7\30\0\1\u01d6\35\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u01d7\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\43\0\1\u01d8\22\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\3\7\1\u01d9\1\0"+
    "\12\7\1\0\1\7\26\0\1\u01da\37\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\u01db\10\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\25\0\1\u01dc\40\0\1\7\2\0"+
    "\2\7\13\0\1\u01dd\11\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\37\0\2\u01de\25\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\u01de\1\u01df\3\7\1\0\12\7\1\0"+
    "\1\7\25\0\1\u01e0\40\0\1\7\2\0\2\7\13\0"+
    "\1\u01e1\11\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\3\7\1\u01e2\6\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\53\0\1\u01e3"+
    "\12\0\1\7\2\0\2\7\13\0\12\7\1\0\4\7"+
    "\1\0\6\7\1\u01e4\3\7\1\0\1\7\30\0\1\u01e5"+
    "\35\0\1\7\2\0\2\7\13\0\3\7\1\u01e6\6\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u01e7\1\u01e8\3\7\1\0"+
    "\12\7\1\0\1\7\43\0\1\u01e9\22\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\3\7\1\u01ea\1\0\12\7"+
    "\1\0\1\7\30\0\1\u01eb\35\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\u01ec\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\u01ed\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\42\0\1\u01ee\23\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\2\7\1\u01ef\1\7\1\0\12\7\1\0\1\7"+
    "\30\0\1\u01f0\72\0\1\u01f1\23\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\u01f2\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\2\7\1\u01f3\1\7\1\0\12\7\1\0\1\7"+
    "\47\0\1\u01f4\16\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\4\7\1\0\2\7\1\u01f5\7\7\1\0\1\7"+
    "\31\0\1\u01f6\34\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u01f7\5\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\36\0\1\u01f8\27\0\1\7\2\0\2\7\13\0\11\7"+
    "\1\u01f9\1\0\4\7\1\0\12\7\1\0\1\7\36\0"+
    "\1\u01fa\27\0\1\7\2\0\2\7\13\0\11\7\1\u01fb"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\36\0\1\u01fc"+
    "\27\0\1\7\2\0\2\7\13\0\11\7\1\u01fd\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\0\4\7\1\u01fe\1\u01ff\11\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\u0200\6\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\27\0\1\u0201\36\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\u0202\7\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\31\0\1\u0203\34\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u0204\5\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\33\0\1\u0205\32\0\1\7\2\0\2\7\13\0\6\7"+
    "\1\u0206\3\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\0\1\7"+
    "\1\u0207\2\7\1\0\12\7\1\0\1\7\25\0\1\u0208"+
    "\40\0\1\7\2\0\2\7\13\0\1\u0209\11\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\46\0\1\u020a\17\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\0\4\7\1\0"+
    "\1\7\1\u020b\10\7\1\0\1\7\31\0\1\u020c\34\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\u020d\5\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\31\0\1\u020e\34\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\u020f\5\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u0210\1\u0211\3\7\1\0\12\7"+
    "\1\0\1\7\54\0\1\u0212\11\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\0\7\7\1\u0213\2\7"+
    "\1\0\1\7\31\0\1\u0214\103\0\1\u0215\11\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\u0216\5\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\0\7\7\1\u0217\2\7"+
    "\1\0\1\7\26\0\1\u0218\37\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\u0219\10\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\26\0\1\u021a\37\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\u021b\10\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\26\0\1\u021c\37\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\u021d\10\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\35\0\1\u021e\30\0\1\7\2\0\2\7"+
    "\13\0\10\7\1\u021f\1\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\42\0\1\u0220\23\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\2\7\1\u0221\1\7\1\0\12\7"+
    "\1\0\1\7\30\0\1\u0222\35\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\u0223\6\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\5\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u0224\5\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\43\0\1\u0225\22\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\0\3\7\1\u0226\1\0\12\7\1\0\1\7\43\0"+
    "\1\u0227\22\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\3\7\1\u0228\1\0\12\7\1\0\1\7\43\0\1\u0229"+
    "\22\0\1\7\2\0\2\7\13\0\12\7\1\0\3\7"+
    "\1\u022a\1\0\12\7\1\0\1\7\36\0\1\u022b\27\0"+
    "\1\7\2\0\2\7\13\0\11\7\1\u022c\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\33\0\1\u022d\32\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\u022e\3\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\33\0\1\u022f\32\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\u0230\3\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\30\0\1\u0231\35\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0232\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\34\0\1\u0233\31\0\1\7"+
    "\2\0\2\7\13\0\7\7\1\u0234\2\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\32\0\1\u0235\33\0\1\7"+
    "\2\0\2\7\13\0\5\7\1\u0236\4\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\4\7\1\u0237\1\u0238\11\7\1\0"+
    "\1\7\35\0\1\u0239\30\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\u023a\1\7\1\0\4\7\1\0\12\7\1\0"+
    "\1\7\25\0\1\u023b\40\0\1\7\2\0\2\7\13\0"+
    "\1\u023c\11\7\1\0\4\7\1\0\12\7\1\0\1\7"+
    "\25\0\1\u023d\40\0\1\7\2\0\2\7\13\0\1\u023e"+
    "\11\7\1\0\4\7\1\0\12\7\1\0\1\7\54\0"+
    "\1\u023f\11\0\1\7\2\0\2\7\13\0\12\7\1\0"+
    "\4\7\1\0\7\7\1\u0240\2\7\1\0\1\7\30\0"+
    "\1\u0241\35\0\1\7\2\0\2\7\13\0\3\7\1\u0242"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\30\0"+
    "\1\u0243\35\0\1\7\2\0\2\7\13\0\3\7\1\u0244"+
    "\6\7\1\0\4\7\1\0\12\7\1\0\1\7\37\0"+
    "\2\u0245\25\0\1\7\2\0\2\7\13\0\12\7\1\u0245"+
    "\1\u0246\3\7\1\0\12\7\1\0\1\7\27\0\1\u0247"+
    "\36\0\1\7\2\0\2\7\13\0\2\7\1\u0248\7\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\30\0\1\u0249"+
    "\35\0\1\7\2\0\2\7\13\0\3\7\1\u024a\6\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7\42\0\1\u024b"+
    "\23\0\1\7\2\0\2\7\13\0\12\7\1\0\2\7"+
    "\1\u024c\1\7\1\0\12\7\1\0\1\7\25\0\1\u024d"+
    "\40\0\1\7\2\0\2\7\13\0\1\u024e\11\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\30\0\1\u024f\35\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\u0250\6\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\32\0\1\u0251\33\0"+
    "\1\7\2\0\2\7\13\0\5\7\1\u0252\4\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\32\0\1\u0253\33\0"+
    "\1\7\2\0\2\7\13\0\5\7\1\u0254\4\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\30\0\1\u0255\35\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\u0256\6\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\31\0\1\u0257\34\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\u0258\5\7\1\0"+
    "\4\7\1\0\12\7\1\0\1\7\37\0\2\u0259\25\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\u0259\1\u025a\3\7"+
    "\1\0\12\7\1\0\1\7\30\0\1\u025b\35\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u025c\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\30\0\1\u025d\35\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u025e\6\7\1\0\4\7"+
    "\1\0\12\7\1\0\1\7\43\0\1\u025f\22\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\0\3\7\1\u0260\1\0"+
    "\12\7\1\0\1\7\31\0\1\u0261\34\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u0262\5\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\31\0\1\u0263\34\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u0264\5\7\1\0\4\7\1\0"+
    "\12\7\1\0\1\7\25\0\1\u0265\40\0\1\7\2\0"+
    "\2\7\13\0\1\u0266\11\7\1\0\4\7\1\0\12\7"+
    "\1\0\1\7\43\0\1\u0267\22\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\0\3\7\1\u0268\1\0\12\7\1\0"+
    "\1\7\43\0\1\u0269\22\0\1\7\2\0\2\7\13\0"+
    "\12\7\1\0\3\7\1\u026a\1\0\12\7\1\0\1\7"+
    "\25\0\1\u026b\40\0\1\7\2\0\2\7\13\0\1\u026c"+
    "\11\7\1\0\4\7\1\0\12\7\1\0\1\7\25\0"+
    "\1\u026d\40\0\1\7\2\0\2\7\13\0\1\u026e\11\7"+
    "\1\0\4\7\1\0\12\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25137];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\4\11\1\1\3\11\22\1\1\0"+
    "\1\11\3\0\2\1\1\0\20\1\1\0\7\1\1\0"+
    "\5\1\1\0\7\1\1\0\3\1\1\0\3\1\1\0"+
    "\22\1\1\0\1\1\1\0\7\1\2\0\6\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\4\1\2\0\5\1\1\0\12\1\1\0\1\1\1\0"+
    "\6\1\1\0\1\1\1\11\2\1\1\0\6\1\2\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\3\1\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\4\1\2\0"+
    "\2\1\1\0\3\1\1\0\6\1\1\0\3\1\1\0"+
    "\6\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\11\3\1\1\0\1\1\1\11\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\4\1\2\0\2\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\3\0\3\1\1\0\6\1\1\0\2\1"+
    "\1\0\4\1\2\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\11\2\0\3\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\11\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\11\1\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public MapfileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MapfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 78: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 79: break;
          case 3: 
            { return COMMENT;
            }
          case 80: break;
          case 4: 
            { return OP_2;
            }
          case 81: break;
          case 5: 
            { return NUMBER;
            }
          case 82: break;
          case 6: 
            { return ID;
            }
          case 83: break;
          case 7: 
            { return SEMI;
            }
          case 84: break;
          case 8: 
            { return EQ;
            }
          case 85: break;
          case 9: 
            { return LP;
            }
          case 86: break;
          case 10: 
            { return RP;
            }
          case 87: break;
          case 11: 
            { return OP_1;
            }
          case 88: break;
          case 12: 
            { return OP_3;
            }
          case 89: break;
          case 13: 
            { return OP_4;
            }
          case 90: break;
          case 14: 
            { return OP_5;
            }
          case 91: break;
          case 15: 
            { return STRING;
            }
          case 92: break;
          case 16: 
            { return MAP;
            }
          case 93: break;
          case 17: 
            { return END;
            }
          case 94: break;
          case 18: 
            { return MASK;
            }
          case 95: break;
          case 19: 
            { return NAME;
            }
          case 96: break;
          case 20: 
            { return DATA;
            }
          case 97: break;
          case 21: 
            { return DUMP;
            }
          case 98: break;
          case 22: 
            { return UNIT;
            }
          case 99: break;
          case 23: 
            { return TYPE;
            }
          case 100: break;
          case 24: 
            { return TRUE;
            }
          case 101: break;
          case 25: 
            { return GRID;
            }
          case 102: break;
          case 26: 
            { return JOIN;
            }
          case 103: break;
          case 27: 
            { return DEBUG;
            }
          case 104: break;
          case 28: 
            { return LAYER;
            }
          case 105: break;
          case 29: 
            { return CLASS;
            }
          case 106: break;
          case 30: 
            { return TITLE;
            }
          case 107: break;
          case 31: 
            { return FALSE;
            }
          case 108: break;
          case 32: 
            { return GROUP;
            }
          case 109: break;
          case 33: 
            { return PLUGIN;
            }
          case 110: break;
          case 34: 
            { return EXTENT;
            }
          case 111: break;
          case 35: 
            { return STATUS;
            }
          case 112: break;
          case 36: 
            { return FOOTER;
            }
          case 113: break;
          case 37: 
            { return FILTER;
            }
          case 114: break;
          case 38: 
            { return HEADER;
            }
          case 115: break;
          case 39: 
            { return CLUSTER;
            }
          case 116: break;
          case 40: 
            { return UTFDATA;
            }
          case 117: break;
          case 41: 
            { return UTFITEM;
            }
          case 118: break;
          case 42: 
            { return TILESRS;
            }
          case 119: break;
          case 43: 
            { return OFFSITE;
            }
          case 120: break;
          case 44: 
            { return FEATURE;
            }
          case 121: break;
          case 45: 
            { return METADATA;
            }
          case 122: break;
          case 46: 
            { return ENCODING;
            }
          case 123: break;
          case 47: 
            { return REQUIRES;
            }
          case 124: break;
          case 48: 
            { return TEMPLATE;
            }
          case 125: break;
          case 49: 
            { return TILEITEM;
            }
          case 126: break;
          case 50: 
            { return LABELITEM;
            }
          case 127: break;
          case 51: 
            { return CLASSITEM;
            }
          case 128: break;
          case 52: 
            { return COMPOSITE;
            }
          case 129: break;
          case 53: 
            { return STYLEITEM;
            }
          case 130: break;
          case 54: 
            { return SIZEUNITS;
            }
          case 131: break;
          case 55: 
            { return TRANSFORM;
            }
          case 132: break;
          case 56: 
            { return TOLERANCE;
            }
          case 133: break;
          case 57: 
            { return TILEINDEX;
            }
          case 134: break;
          case 58: 
            { return PROCESSING;
            }
          case 135: break;
          case 59: 
            { return PROJECTION;
            }
          case 136: break;
          case 60: 
            { return LABELCACHE;
            }
          case 137: break;
          case 61: 
            { return CLASSGROUP;
            }
          case 138: break;
          case 62: 
            { return CONNECTION;
            }
          case 139: break;
          case 63: 
            { return FILTERITEM;
            }
          case 140: break;
          case 64: 
            { return VALIDATION;
            }
          case 141: break;
          case 65: 
            { return MAXFEATURES;
            }
          case 142: break;
          case 66: 
            { return MAXGEOWIDTH;
            }
          case 143: break;
          case 67: 
            { return MINGEOWIDTH;
            }
          case 144: break;
          case 68: 
            { return MAXSCALEDENOM;
            }
          case 145: break;
          case 69: 
            { return MINSCALEDENOM;
            }
          case 146: break;
          case 70: 
            { return LABELREQUIRES;
            }
          case 147: break;
          case 71: 
            { return GEOMTRANSFORM;
            }
          case 148: break;
          case 72: 
            { return POSTLABELCACHE;
            }
          case 149: break;
          case 73: 
            { return CONNECTIONTYPE;
            }
          case 150: break;
          case 74: 
            { return TOLERANCEUNITS;
            }
          case 151: break;
          case 75: 
            { return SYMBOLSCALEDENOM;
            }
          case 152: break;
          case 76: 
            { return LABELMAXSCALEDENOM;
            }
          case 153: break;
          case 77: 
            { return LABELMINSCALEDENOM;
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
