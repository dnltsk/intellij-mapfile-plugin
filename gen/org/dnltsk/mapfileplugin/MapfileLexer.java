/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.dnltsk.mapfileplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.dnltsk.mapfileplugin.psi.MapfileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Mapfile.flex</tt>
 */
public class MapfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\21\1\7\1\10\2\0\1\20\1\5\1\27\1\30\1\12\1\17"+
    "\3\0\1\11\12\4\1\14\1\22\1\31\1\13\1\32\1\16\1\0\1\34\1\4\1\44\1\40\1\36\1"+
    "\52\1\53\1\4\1\51\1\54\1\4\1\41\1\33\1\37\1\50\1\35\1\4\1\43\1\45\1\47\1\46"+
    "\1\55\2\4\1\42\1\4\1\25\1\6\1\26\1\0\1\4\1\0\1\63\3\4\1\61\1\62\5\4\1\64\5"+
    "\4\1\57\1\65\1\56\1\60\5\4\1\23\1\15\1\24\7\0\1\1\32\0\1\3\337\0\1\3\177\0"+
    "\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\1\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\1\13\3"+
    "\1\0\1\23\5\0\1\24\1\25\15\3\1\23\1\0"+
    "\1\26\1\27\2\3\1\30\12\3\1\31\7\3\1\32"+
    "\1\33\1\3\1\34\3\3\1\35\1\36\4\3\1\37"+
    "\10\3\1\40\1\3\1\41\1\3\1\42\4\3\1\43"+
    "\1\3\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\66\0\66\0\u01b0\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\u01e6"+
    "\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\330\0\66\0\u04a4\0\u010e"+
    "\0\u04da\0\u0510\0\u0546\0\66\0\66\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u010e\0\u083a\0\66\0\242\0\u0870\0\u08a6"+
    "\0\242\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0510\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\242\0\242\0\u0c72\0\242\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\242\0\242\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\242\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\242\0\u0fd2\0\242\0\u1008\0\242\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\242\0\u1116\0\242\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\4\1\33\1\34\2\4\1\35\2\4"+
    "\1\36\5\4\1\37\1\40\1\41\1\42\1\43\3\4"+
    "\1\44\3\4\67\0\3\3\66\0\1\4\26\0\33\4"+
    "\5\45\1\46\1\47\57\45\6\50\1\51\1\46\56\50"+
    "\1\7\2\0\63\7\12\0\1\52\67\0\1\53\102\0"+
    "\1\54\66\0\1\55\37\0\1\4\26\0\1\4\1\56"+
    "\1\4\1\57\27\4\4\0\1\4\26\0\10\4\1\60"+
    "\22\4\4\0\1\4\26\0\4\4\1\61\26\4\4\0"+
    "\1\4\26\0\1\4\1\62\31\4\4\0\1\4\26\0"+
    "\6\4\1\63\6\4\1\64\15\4\4\0\1\4\26\0"+
    "\3\4\1\65\27\4\4\0\1\4\26\0\10\4\1\66"+
    "\22\4\4\0\1\4\26\0\15\4\1\67\15\4\4\0"+
    "\1\4\26\0\1\4\1\70\31\4\4\0\1\4\26\0"+
    "\24\4\1\71\6\4\4\0\1\4\26\0\30\4\1\72"+
    "\2\4\1\45\2\0\63\45\6\50\1\51\1\73\56\50"+
    "\1\52\1\0\10\52\1\74\53\52\13\0\1\75\56\0"+
    "\1\4\26\0\2\4\1\76\30\4\4\0\1\4\26\0"+
    "\14\4\1\77\16\4\4\0\1\4\26\0\15\4\1\100"+
    "\15\4\4\0\1\4\26\0\5\4\1\101\25\4\4\0"+
    "\1\4\26\0\7\4\1\102\23\4\4\0\1\4\26\0"+
    "\1\4\1\103\11\4\1\104\17\4\4\0\1\4\26\0"+
    "\1\105\32\4\4\0\1\4\26\0\1\4\1\106\31\4"+
    "\4\0\1\4\26\0\16\4\1\107\14\4\4\0\1\4"+
    "\26\0\16\4\1\110\14\4\4\0\1\4\26\0\6\4"+
    "\1\111\24\4\4\0\1\4\26\0\25\4\1\112\5\4"+
    "\4\0\1\4\26\0\31\4\1\113\1\4\1\52\1\0"+
    "\7\52\1\114\1\74\53\52\4\0\1\4\26\0\1\4"+
    "\1\115\31\4\4\0\1\4\26\0\21\4\1\116\11\4"+
    "\4\0\1\4\26\0\3\4\1\117\27\4\4\0\1\4"+
    "\26\0\12\4\1\120\20\4\4\0\1\4\26\0\12\4"+
    "\1\121\20\4\4\0\1\4\26\0\2\4\1\122\30\4"+
    "\4\0\1\4\26\0\14\4\1\123\16\4\4\0\1\4"+
    "\26\0\5\4\1\124\25\4\4\0\1\4\26\0\4\4"+
    "\1\125\26\4\4\0\1\4\26\0\16\4\1\126\14\4"+
    "\4\0\1\4\26\0\26\4\1\127\4\4\4\0\1\4"+
    "\26\0\32\4\1\130\4\0\1\4\26\0\5\4\1\131"+
    "\25\4\4\0\1\4\26\0\3\4\1\132\27\4\4\0"+
    "\1\4\26\0\10\4\1\133\22\4\4\0\1\4\26\0"+
    "\12\4\1\134\20\4\4\0\1\4\26\0\14\4\1\135"+
    "\16\4\4\0\1\4\26\0\15\4\1\136\15\4\4\0"+
    "\1\4\26\0\13\4\1\137\17\4\4\0\1\4\26\0"+
    "\5\4\1\140\25\4\4\0\1\4\26\0\26\4\1\141"+
    "\4\4\4\0\1\4\26\0\1\4\1\142\31\4\4\0"+
    "\1\4\26\0\11\4\1\143\21\4\4\0\1\4\26\0"+
    "\3\4\1\144\27\4\4\0\1\4\26\0\12\4\1\145"+
    "\20\4\4\0\1\4\26\0\10\4\1\146\22\4\4\0"+
    "\1\4\26\0\1\4\1\147\31\4\4\0\1\4\26\0"+
    "\14\4\1\150\16\4\4\0\1\4\26\0\14\4\1\151"+
    "\16\4\4\0\1\4\26\0\10\4\1\152\22\4\4\0"+
    "\1\4\26\0\16\4\1\153\14\4\4\0\1\4\26\0"+
    "\3\4\1\154\27\4\4\0\1\4\26\0\14\4\1\155"+
    "\16\4\4\0\1\4\26\0\1\4\1\156\31\4\4\0"+
    "\1\4\26\0\16\4\1\157\14\4\4\0\1\4\26\0"+
    "\14\4\1\160\16\4\4\0\1\4\26\0\16\4\1\161"+
    "\14\4\4\0\1\4\26\0\15\4\1\162\15\4\4\0"+
    "\1\4\26\0\3\4\1\163\27\4\4\0\1\4\26\0"+
    "\15\4\1\164\15\4\4\0\1\4\26\0\4\4\1\165"+
    "\26\4\4\0\1\4\26\0\4\4\1\166\26\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\1\1\14\11\15\1\1\0"+
    "\1\11\5\0\2\11\16\1\1\0\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public MapfileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MapfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 38: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 39: break;
          case 3: 
            { return ID;
            }
          case 40: break;
          case 4: 
            { return LINE_COMMENT;
            }
          case 41: break;
          case 5: 
            { return OP_ZEROMORE;
            }
          case 42: break;
          case 6: 
            { return OP_EQ;
            }
          case 43: break;
          case 7: 
            { return OP_OR;
            }
          case 44: break;
          case 8: 
            { return OP_OPT;
            }
          case 45: break;
          case 9: 
            { return OP_ONEMORE;
            }
          case 46: break;
          case 10: 
            { return OP_AND;
            }
          case 47: break;
          case 11: 
            { return OP_NOT;
            }
          case 48: break;
          case 12: 
            { return SEMICOLON;
            }
          case 49: break;
          case 13: 
            { return LEFT_BRACE;
            }
          case 50: break;
          case 14: 
            { return RIGHT_BRACE;
            }
          case 51: break;
          case 15: 
            { return LEFT_BRACKET;
            }
          case 52: break;
          case 16: 
            { return RIGHT_BRACKET;
            }
          case 53: break;
          case 17: 
            { return LEFT_PAREN;
            }
          case 54: break;
          case 18: 
            { return RIGHT_PAREN;
            }
          case 55: break;
          case 19: 
            { return STRING;
            }
          case 56: break;
          case 20: 
            { return EXTERNAL_START;
            }
          case 57: break;
          case 21: 
            { return EXTERNAL_END;
            }
          case 58: break;
          case 22: 
            { return OP_IS;
            }
          case 59: break;
          case 23: 
            { return MAP;
            }
          case 60: break;
          case 24: 
            { return END;
            }
          case 61: break;
          case 25: 
            { return BLOCK_COMMENT;
            }
          case 62: break;
          case 26: 
            { return GRID;
            }
          case 63: break;
          case 27: 
            { return JOIN;
            }
          case 64: break;
          case 28: 
            { return TRUE;
            }
          case 65: break;
          case 29: 
            { return LAYER;
            }
          case 66: break;
          case 30: 
            { return CLASS;
            }
          case 67: break;
          case 31: 
            { return FALSE;
            }
          case 68: break;
          case 32: 
            { return CLUSTER;
            }
          case 69: break;
          case 33: 
            { return FEATURE;
            }
          case 70: break;
          case 34: 
            { return METADATA;
            }
          case 71: break;
          case 35: 
            { return COMPOSITE;
            }
          case 72: break;
          case 36: 
            { return PROJECTION;
            }
          case 73: break;
          case 37: 
            { return VALIDATION;
            }
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
