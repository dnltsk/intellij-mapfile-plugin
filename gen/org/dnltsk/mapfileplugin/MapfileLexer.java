/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.dnltsk.mapfileplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.dnltsk.mapfileplugin.psi.MapfileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Mapfile.flex</tt>
 */
public class MapfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13664 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\136\1\30\4\13\1\30\1"+
    "\137\1\140\1\16\1\13\1\16\1\13\1\16\1\140\1\67\3\13\1\141\1\1\1\142\4\1\5"+
    "\13\1\27\2\13\1\143\4\13\1\40\1\13\1\144\3\1\1\13\1\145\1\47\2\13\1\146\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\147\5\1\1\104\2\13\1\141\1\150\3\1"+
    "\1\151\1\13\1\152\1\42\2\13\1\40\1\1\2\13\1\141\1\1\1\37\1\42\1\13\1\145\6"+
    "\1\1\153\1\154\14\13\4\1\21\13\1\134\2\13\1\134\1\155\1\13\1\145\3\13\1\156"+
    "\1\157\1\160\1\120\1\157\1\161\1\1\1\162\2\1\1\163\1\1\1\164\1\1\1\120\6\1"+
    "\1\165\1\166\1\167\1\170\1\171\3\1\1\172\147\1\2\13\1\144\2\13\1\144\10\13"+
    "\1\173\1\174\2\13\1\126\3\13\1\175\1\1\1\13\1\107\4\176\4\1\1\103\35\1\1\177"+
    "\2\1\1\200\1\25\4\13\1\201\1\25\4\13\1\127\1\104\1\13\1\145\1\25\4\13\1\144"+
    "\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4"+
    "\1\2\13\1\145\20\13\1\120\1\13\1\202\1\1\2\13\1\144\1\103\1\13\1\145\4\13"+
    "\1\40\2\1\1\203\1\204\5\13\1\205\1\13\1\145\1\27\3\1\1\203\1\206\1\13\1\31"+
    "\1\1\3\13\1\141\1\204\2\13\1\141\3\1\1\207\1\42\1\13\1\40\1\13\1\107\1\1\1"+
    "\13\1\120\1\50\2\13\1\31\1\103\1\1\1\210\1\211\2\13\1\46\1\1\1\212\1\1\1\13"+
    "\1\213\3\13\1\214\1\215\1\216\1\30\1\64\1\217\1\220\1\176\2\13\1\127\1\40"+
    "\7\13\1\31\1\1\72\13\1\141\1\13\1\221\2\13\1\146\20\1\26\13\1\145\6\13\1\75"+
    "\2\1\1\107\1\222\1\55\1\223\1\224\6\13\1\16\1\1\1\151\25\13\1\145\1\1\4\13"+
    "\1\204\2\13\1\27\2\1\1\146\7\1\1\210\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1"+
    "\225\4\13\1\144\1\226\1\227\2\1\1\230\1\13\1\14\1\231\2\145\2\1\7\13\1\30"+
    "\30\1\1\13\1\120\3\13\1\67\2\1\2\13\1\1\1\13\1\232\2\13\1\40\1\13\1\145\2"+
    "\13\1\233\3\1\11\13\1\145\6\1\2\13\1\27\3\13\1\141\11\1\23\13\1\107\1\13\1"+
    "\40\1\27\11\1\1\234\2\13\1\235\1\13\1\40\1\13\1\107\1\13\1\144\4\1\1\13\1"+
    "\236\1\13\1\40\1\13\1\75\4\1\3\13\1\237\4\1\1\67\1\240\1\13\1\141\2\1\1\13"+
    "\1\120\1\13\1\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1"+
    "\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\151\2\13\1\27\4\1\1"+
    "\151\2\13\2\1\1\13\1\46\1\1\1\151\1\13\1\107\2\1\2\13\1\241\1\151\2\13\1\31"+
    "\1\242\1\243\2\1\1\13\1\22\1\146\5\1\1\244\1\245\1\46\2\13\1\144\2\1\1\71"+
    "\1\54\1\55\1\66\1\1\1\246\1\16\21\1\3\13\1\1\1\247\13\1\2\13\1\144\2\1\1\250"+
    "\2\1\3\13\1\1\1\251\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3"+
    "\13\1\46\20\1\71\13\1\75\16\1\14\13\1\141\53\1\2\13\1\144\75\1\44\13\1\107"+
    "\33\1\43\13\1\46\1\13\1\144\7\1\1\13\1\145\1\1\3\13\1\1\1\141\1\1\1\151\1"+
    "\252\1\13\67\1\4\13\1\47\1\67\3\1\1\151\6\1\1\16\77\1\6\13\1\30\1\120\1\46"+
    "\1\75\66\1\5\13\1\210\3\13\1\140\1\253\1\254\1\255\3\13\1\256\1\257\1\13\1"+
    "\260\1\261\1\36\24\13\1\262\1\13\1\36\1\127\1\13\1\127\1\13\1\210\1\13\1\210"+
    "\1\144\1\13\1\144\1\13\1\55\1\13\1\55\1\13\1\212\3\1\14\13\1\47\123\1\1\255"+
    "\1\13\1\263\1\264\1\265\1\266\1\267\1\270\1\271\1\146\1\272\1\146\24\1\55"+
    "\13\1\107\2\1\103\13\1\47\15\13\1\145\150\13\1\16\25\1\41\13\1\145\36\1");

  /* The ZZ_CMAP_A table has 2992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\24\1\14\1\3\3\0\1\12\1\17\1\20\1\22\1\21\1\0\1\4"+
    "\1\6\1\23\12\5\1\0\1\15\1\0\1\16\3\0\1\26\1\50\1\36\1\32\1\30\1\44\1\45\1"+
    "\52\1\43\1\46\1\65\1\33\1\25\1\31\1\42\1\27\1\64\1\35\1\37\1\41\1\40\1\47"+
    "\1\66\1\51\1\34\1\53\1\0\1\13\2\0\1\10\1\0\1\61\3\11\1\57\1\60\5\11\1\62\5"+
    "\11\1\55\1\63\1\54\1\56\5\11\12\0\1\1\12\0\1\2\11\0\1\7\12\0\1\7\4\0\1\7\5"+
    "\0\27\7\1\0\12\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7"+
    "\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26"+
    "\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\33\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12"+
    "\0\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\30\0\6\7\4\0\2\7\4\0\1\7\5\0\6"+
    "\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7\2\0\1\7\7\0"+
    "\11\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15"+
    "\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\3"+
    "\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10"+
    "\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2"+
    "\7\15\0\13\7\2\0\1\7\21\0\1\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11"+
    "\0\1\7\1\0\2\7\15\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1"+
    "\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\25"+
    "\0\14\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7"+
    "\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1"+
    "\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15"+
    "\7\2\0\1\7\1\2\17\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1"+
    "\0\1\7\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\11\0"+
    "\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\13\2\15\0\2\1\5\0\1\2\17\0\1\2\1"+
    "\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1"+
    "\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0\5\7\6\0\4\7\3"+
    "\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\1\0\1\2\4\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7"+
    "\6\0\3\7\12\0\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6"+
    "\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\0\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0"+
    "\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1"+
    "\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7"+
    "\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4"+
    "\7\25\0\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\4\0"+
    "\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1"+
    "\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7"+
    "\1\0\5\7\1\0\1\7\3\0\14\7\2\0\10\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4"+
    "\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1"+
    "\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\23\6\1\5\1\0\1\17\3\0\45\6\1\20\7\6"+
    "\1\21\45\6\1\22\14\6\1\23\1\24\1\6\1\25"+
    "\13\6\1\26\3\6\1\27\12\6\1\30\1\31\2\6"+
    "\1\32\15\6\1\33\1\34\2\6\1\35\16\6\1\36"+
    "\5\6\1\37\2\6\1\40\6\6\1\41\4\6\1\42"+
    "\13\6\1\43\14\6\1\44\1\45\2\6\1\46\22\6"+
    "\1\47\5\6\1\50\1\51\3\6\1\52\2\6\1\53"+
    "\1\54\6\6\1\55\5\6\1\56\5\6\1\57\7\6"+
    "\1\60\3\6\1\61\17\6\1\62\1\63\1\6\1\64"+
    "\2\6\1\65\1\66\1\67\1\70\1\71\10\6\1\72"+
    "\1\73\4\6\1\74\1\75\1\76\2\6\1\77\1\6"+
    "\1\100\1\6\1\101\1\102\1\6\1\103\22\6\1\104"+
    "\1\105\3\6\1\106\3\6\1\107\1\110\2\6\1\111"+
    "\1\6\1\112\5\6\1\113\2\6\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\67\0\67\0\67\0\67\0\334\0\67\0\67"+
    "\0\67\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u0181\0\67\0\u063b"+
    "\0\u01b8\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u014a"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u014a"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u014a\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u014a\0\u014a\0\u1aa4\0\u014a\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u014a\0\u1d38\0\u1d6f\0\u1da6\0\u014a\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u014a\0\u014a\0\u2003\0\u203a\0\u014a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u014a\0\u014a\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u014a\0\u26e3\0\u271a"+
    "\0\u2751\0\u2788\0\u27bf\0\u014a\0\u27f6\0\u282d\0\u014a\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u014a\0\u29ae\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\u014a\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u014a\0\u2ce7"+
    "\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u014a\0\u2f7b\0\u2fb2\0\u2fe9\0\u014a"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u014a\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u014a\0\u014a\0\u3511\0\u3548\0\u357f\0\u014a\0\u35b6\0\u35ed"+
    "\0\u014a\0\u014a\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737"+
    "\0\u014a\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u014a\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u014a\0\u3994\0\u39cb\0\u3a02"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u014a\0\u3b15\0\u3b4c\0\u3b83"+
    "\0\u014a\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc"+
    "\0\u014a\0\u014a\0\u3ef3\0\u014a\0\u3f2a\0\u3f61\0\u014a\0\u014a"+
    "\0\u014a\0\u3f98\0\u014a\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab"+
    "\0\u40e2\0\u4119\0\u4150\0\u014a\0\u014a\0\u4187\0\u41be\0\u41f5"+
    "\0\u422c\0\u014a\0\u014a\0\u4263\0\u429a\0\u42d1\0\u014a\0\u4308"+
    "\0\u014a\0\u433f\0\u014a\0\u014a\0\u4376\0\u014a\0\u43ad\0\u43e4"+
    "\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c"+
    "\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754"+
    "\0\u014a\0\u014a\0\u478b\0\u47c2\0\u47f9\0\u014a\0\u4830\0\u4867"+
    "\0\u489e\0\u014a\0\u014a\0\u48d5\0\u490c\0\u014a\0\u4943\0\u014a"+
    "\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u014a\0\u4a8d\0\u4ac4"+
    "\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\2"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\7\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\7\1\36\1\37\1\40\1\41\2\7"+
    "\1\42\1\7\1\43\3\7\1\44\6\7\70\0\2\3"+
    "\64\0\1\4\1\0\65\4\5\0\1\6\66\0\1\6"+
    "\1\45\65\0\1\7\2\0\2\7\13\0\42\7\12\46"+
    "\1\47\1\50\53\46\13\51\1\52\1\47\52\51\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\53\1\7\1\54"+
    "\12\7\1\55\23\7\5\0\1\7\2\0\2\7\13\0"+
    "\6\7\1\56\1\7\1\57\4\7\1\60\24\7\5\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\61\17\7\1\62"+
    "\15\7\5\0\1\7\2\0\2\7\13\0\1\7\1\63"+
    "\40\7\5\0\1\7\2\0\2\7\13\0\1\7\1\64"+
    "\1\7\1\65\7\7\1\66\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\67\40\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\70\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\71\6\7\1\72\24\7\5\0"+
    "\1\7\2\0\2\7\13\0\7\7\1\73\4\7\1\74"+
    "\1\7\1\75\23\7\5\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\76\7\7\1\77\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\100\3\7\1\101\1\102\4\7"+
    "\1\103\1\104\23\7\5\0\1\7\2\0\2\7\13\0"+
    "\17\7\1\105\22\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\106\11\7\1\107\1\110\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\111\4\7\1\112\31\7"+
    "\5\0\1\7\2\0\2\7\13\0\15\7\1\113\24\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\114\40\7"+
    "\5\0\1\7\2\0\2\7\13\0\3\7\1\115\36\7"+
    "\5\0\1\7\2\0\2\7\13\0\30\7\1\116\11\7"+
    "\5\0\1\7\2\0\2\7\13\0\34\7\1\117\5\7"+
    "\5\0\1\45\61\0\1\46\1\0\65\46\1\51\1\0"+
    "\65\51\5\0\1\7\2\0\2\7\13\0\2\7\1\120"+
    "\7\7\1\121\11\7\1\122\15\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\123\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\124\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\125\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\15\7\1\126\24\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\127\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\130\3\7\1\131\30\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\132\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\133\41\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\134\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\23\7\1\135\16\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\136\41\7\5\0\1\7\2\0"+
    "\2\7\13\0\7\7\1\137\13\7\1\140\16\7\5\0"+
    "\1\7\2\0\2\7\13\0\37\7\1\141\2\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\142\11\7\1\143"+
    "\26\7\5\0\1\7\2\0\2\7\13\0\1\144\3\7"+
    "\1\145\35\7\5\0\1\7\2\0\2\7\13\0\1\146"+
    "\41\7\5\0\1\7\2\0\2\7\13\0\1\7\1\147"+
    "\5\7\1\150\32\7\5\0\1\7\2\0\2\7\13\0"+
    "\26\7\1\151\13\7\5\0\1\7\2\0\2\7\13\0"+
    "\16\7\1\152\23\7\5\0\1\7\2\0\2\7\13\0"+
    "\17\7\1\153\22\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\154\41\7\5\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\155\37\7\5\0\1\7\2\0\2\7\13\0\1\7"+
    "\1\156\40\7\5\0\1\7\2\0\2\7\13\0\6\7"+
    "\1\157\33\7\5\0\1\7\2\0\2\7\13\0\6\7"+
    "\1\160\5\7\1\161\25\7\5\0\1\7\2\0\2\7"+
    "\13\0\17\7\1\162\22\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\163\40\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\164\24\7\5\0\1\7\2\0\2\7"+
    "\13\0\6\7\1\165\33\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\166\24\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\167\1\170\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\171\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\172\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\173\40\7\5\0\1\7\2\0"+
    "\2\7\13\0\31\7\1\174\10\7\5\0\1\7\2\0"+
    "\2\7\13\0\35\7\1\175\4\7\5\0\1\7\2\0"+
    "\2\7\13\0\40\7\1\176\1\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\177\4\7\1\200\1\201\21\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\202\40\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\203\5\7"+
    "\1\204\21\7\5\0\1\7\2\0\2\7\13\0\20\7"+
    "\1\205\21\7\5\0\1\7\2\0\2\7\13\0\11\7"+
    "\1\206\7\7\1\207\20\7\5\0\1\7\2\0\2\7"+
    "\13\0\14\7\1\210\25\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\211\24\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\212\36\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\213\36\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\7\1\214\40\7\5\0\1\7\2\0\2\7"+
    "\13\0\13\7\1\215\26\7\5\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\216\37\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\217\36\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\220\36\7\5\0\1\7\2\0\2\7"+
    "\13\0\13\7\1\221\26\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\222\27\7\5\0\1\7\2\0\2\7"+
    "\13\0\12\7\1\223\27\7\5\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\224\37\7\5\0\1\7\2\0\2\7"+
    "\13\0\4\7\1\225\35\7\5\0\1\7\2\0\2\7"+
    "\13\0\23\7\1\226\16\7\5\0\1\7\2\0\2\7"+
    "\13\0\14\7\1\227\25\7\5\0\1\7\2\0\2\7"+
    "\13\0\6\7\1\230\33\7\5\0\1\7\2\0\2\7"+
    "\13\0\3\7\1\231\36\7\5\0\1\7\2\0\2\7"+
    "\13\0\14\7\1\232\25\7\5\0\1\7\2\0\2\7"+
    "\13\0\5\7\1\233\10\7\1\234\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\2\7\1\235\37\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\236\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\237\35\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\240\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\241\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\242\33\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\243\27\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\244\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\245\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\246\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\247\41\7\5\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\250\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\251\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\252\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\253\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\254\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\32\7\1\255\7\7\5\0\1\7\2\0"+
    "\2\7\13\0\36\7\1\256\3\7\5\0\1\7\2\0"+
    "\2\7\13\0\11\7\1\257\30\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\260\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\261\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\262\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\11\7\1\263\30\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\264\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\265\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\266\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\267\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\270\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\271\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\272\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\20\7\1\273\21\7\5\0\1\7\2\0"+
    "\2\7\13\0\10\7\1\274\31\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\275\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\276\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\277\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\300\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\15\7\1\301\24\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\302\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\15\7\1\303\24\7\5\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\304\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\305\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\306\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\307\40\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\310\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\311\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\312\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\10\7\1\313\31\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\314\3\7\1\315\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\316\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\16\7\1\317\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\13\7\1\320\26\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\321\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\322\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\323\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\2\7\1\324\37\7\5\0"+
    "\1\7\2\0\2\7\13\0\5\7\1\325\34\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\326\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\32\7\1\327\7\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\330\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\331\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\15\7\1\332\24\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\333\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\334\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\15\7\1\335\24\7\5\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\336\35\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\337\27\7\5\0"+
    "\1\7\2\0\2\7\13\0\11\7\1\340\30\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\341\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\16\7\1\342\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\343\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\344\7\7\1\345\1\346"+
    "\4\7\1\347\23\7\5\0\1\7\2\0\2\7\13\0"+
    "\10\7\1\350\31\7\5\0\1\7\2\0\2\7\13\0"+
    "\16\7\1\351\1\7\1\352\21\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\353\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\354\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\11\7\1\355\30\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\356\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\357\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\360\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\361\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\362\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\363\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\364\40\7\5\0\1\7\2\0"+
    "\2\7\13\0\17\7\1\365\22\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\366\40\7\5\0\1\7\2\0"+
    "\2\7\13\0\10\7\1\367\31\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\370\7\7\1\371\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\372\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\373\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\374\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\375\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\376\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\377\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\u0100\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\6\7\1\u0101\33\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\u0102\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\41\7\1\u0103\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u0104\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\6\7\1\u0105\33\7\5\0\1\7"+
    "\2\0\2\7\13\0\41\7\1\u0106\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u0107\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\u0108\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\23\7\1\u0109\16\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u010a\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\u010b\14\7\1\u010c\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\u010d\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\u010e\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\u010f\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\3\7\1\u0110\36\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\u0111\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\u0112\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\u0113\31\7\5\0"+
    "\1\7\2\0\2\7\13\0\16\7\1\u0114\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\u0115\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\12\7\1\u0116\27\7\5\0"+
    "\1\7\2\0\2\7\13\0\14\7\1\u0117\25\7\5\0"+
    "\1\7\2\0\2\7\13\0\16\7\1\u0118\23\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\7\1\u0119\40\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\u011a\41\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u011b\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\15\7\1\u011c\24\7\5\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\u011d\35\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u011e\27\7\5\0\1\7"+
    "\2\0\2\7\13\0\5\7\1\u011f\34\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0120\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0121\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0122\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u0123\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\u0124\40\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u0125\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0126\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\13\7\1\u0127\26\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u0128\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\u0129\40\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u012a\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u012b\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u012c\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u012d\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u012e\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\20\7\1\u012f\21\7\5\0\1\7"+
    "\2\0\2\7\13\0\24\7\1\u0130\15\7\5\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\u0131\35\7\5\0\1\7"+
    "\2\0\2\7\13\0\37\7\1\u0132\2\7\5\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\u0133\30\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0134\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u0135\27\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0136\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\15\7\1\u0137\24\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u0138\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\16\7\1\u0139\23\7\5\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\u013a\30\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u013b\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u013c\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u013d\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\10\7\1\u013e\31\7\5\0\1\7"+
    "\2\0\2\7\13\0\11\7\1\u013f\30\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0140\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\u0141\41\7\5\0\1\7\2\0"+
    "\2\7\13\0\14\7\1\u0142\25\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u0143\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\16\7\1\u0144\23\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0145\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\10\7\1\u0146\31\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0147\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0148\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0149\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u014a\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\15\7\1\u014b\24\7\5\0\1\7\2\0"+
    "\2\7\13\0\6\7\1\u014c\33\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u014d\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u014e\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\u014f\26\7\5\0\1\7\2\0"+
    "\2\7\13\0\25\7\1\u0150\14\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\u0151\41\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\u0152\41\7\5\0\1\7\2\0\2\7\13\0"+
    "\13\7\1\u0153\26\7\5\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0154\36\7\5\0\1\7\2\0\2\7\13\0"+
    "\15\7\1\u0155\24\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\7\1\u0156\40\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\u0157\41\7\5\0\1\7\2\0\2\7\13\0\12\7"+
    "\1\u0158\27\7\5\0\1\7\2\0\2\7\13\0\1\u0159"+
    "\41\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u015a"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\24\7\1\u015b"+
    "\15\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u015c"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\12\7\1\u015d"+
    "\27\7\5\0\1\7\2\0\2\7\13\0\15\7\1\u015e"+
    "\24\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u015f"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u0160"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\14\7\1\u0161"+
    "\25\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u0162"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\14\7\1\u0163"+
    "\25\7\5\0\1\7\2\0\2\7\13\0\20\7\1\u0164"+
    "\21\7\5\0\1\7\2\0\2\7\13\0\4\7\1\u0165"+
    "\35\7\5\0\1\7\2\0\2\7\13\0\11\7\1\u0166"+
    "\30\7\5\0\1\7\2\0\2\7\13\0\11\7\1\u0167"+
    "\30\7\5\0\1\7\2\0\2\7\13\0\11\7\1\u0168"+
    "\30\7\5\0\1\7\2\0\2\7\13\0\16\7\1\u0169"+
    "\23\7\5\0\1\7\2\0\2\7\13\0\3\7\1\u016a"+
    "\36\7\5\0\1\7\2\0\2\7\13\0\2\7\1\u016b"+
    "\37\7\5\0\1\7\2\0\2\7\13\0\4\7\1\u016c"+
    "\35\7\5\0\1\7\2\0\2\7\13\0\6\7\1\u016d"+
    "\33\7\5\0\1\7\2\0\2\7\13\0\13\7\1\u016e"+
    "\26\7\5\0\1\7\2\0\2\7\13\0\1\u016f\41\7"+
    "\5\0\1\7\2\0\2\7\13\0\17\7\1\u0170\22\7"+
    "\5\0\1\7\2\0\2\7\13\0\4\7\1\u0171\35\7"+
    "\5\0\1\7\2\0\2\7\13\0\4\7\1\u0172\35\7"+
    "\5\0\1\7\2\0\2\7\13\0\12\7\1\u0173\27\7"+
    "\5\0\1\7\2\0\2\7\13\0\25\7\1\u0174\14\7"+
    "\5\0\1\7\2\0\2\7\13\0\4\7\1\u0175\35\7"+
    "\5\0\1\7\2\0\2\7\13\0\25\7\1\u0176\14\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\u0177\40\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\u0178\40\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\7\1\u0179\40\7"+
    "\5\0\1\7\2\0\2\7\13\0\10\7\1\u017a\31\7"+
    "\5\0\1\7\2\0\2\7\13\0\14\7\1\u017b\25\7"+
    "\5\0\1\7\2\0\2\7\13\0\3\7\1\u017c\36\7"+
    "\5\0\1\7\2\0\2\7\13\0\4\7\1\u017d\35\7"+
    "\5\0\1\7\2\0\2\7\13\0\15\7\1\u017e\24\7"+
    "\5\0\1\7\2\0\2\7\13\0\15\7\1\u017f\24\7"+
    "\5\0\1\7\2\0\2\7\13\0\15\7\1\u0180\24\7"+
    "\5\0\1\7\2\0\2\7\13\0\11\7\1\u0181\30\7"+
    "\5\0\1\7\2\0\2\7\13\0\6\7\1\u0182\33\7"+
    "\5\0\1\7\2\0\2\7\13\0\6\7\1\u0183\33\7"+
    "\5\0\1\7\2\0\2\7\13\0\3\7\1\u0184\36\7"+
    "\5\0\1\7\2\0\2\7\13\0\7\7\1\u0185\32\7"+
    "\5\0\1\7\2\0\2\7\13\0\5\7\1\u0186\34\7"+
    "\5\0\1\7\2\0\2\7\13\0\16\7\1\u0187\23\7"+
    "\5\0\1\7\2\0\2\7\13\0\10\7\1\u0188\31\7"+
    "\5\0\1\7\2\0\2\7\13\0\1\u0189\41\7\5\0"+
    "\1\7\2\0\2\7\13\0\1\u018a\41\7\5\0\1\7"+
    "\2\0\2\7\13\0\25\7\1\u018b\14\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u018c\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u018d\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\12\7\1\u018e\27\7\5\0\1\7"+
    "\2\0\2\7\13\0\2\7\1\u018f\37\7\5\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\u0190\36\7\5\0\1\7"+
    "\2\0\2\7\13\0\14\7\1\u0191\25\7\5\0\1\7"+
    "\2\0\2\7\13\0\1\u0192\41\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\u0193\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0194\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\5\7\1\u0195\34\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\u0196\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u0197\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\u0198\27\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\u0199\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\u019a\36\7\5\0\1\7\2\0"+
    "\2\7\13\0\15\7\1\u019b\24\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u019c\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\u019d\35\7\5\0\1\7\2\0"+
    "\2\7\13\0\1\u019e\41\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\u019f\24\7\5\0\1\7\2\0\2\7"+
    "\13\0\15\7\1\u01a0\24\7\5\0\1\7\2\0\2\7"+
    "\13\0\1\u01a1\41\7\5\0\1\7\2\0\2\7\13\0"+
    "\1\u01a2\41\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19195];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\4\11\1\1\3\11\24\1\1\0"+
    "\1\11\3\0\u0178\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public MapfileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MapfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 78: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 79: break;
          case 3: 
            { return COMMENT;
            }
          case 80: break;
          case 4: 
            { return OP_2;
            }
          case 81: break;
          case 5: 
            { return NUMBER;
            }
          case 82: break;
          case 6: 
            { return ID;
            }
          case 83: break;
          case 7: 
            { return SEMI;
            }
          case 84: break;
          case 8: 
            { return EQ;
            }
          case 85: break;
          case 9: 
            { return LP;
            }
          case 86: break;
          case 10: 
            { return RP;
            }
          case 87: break;
          case 11: 
            { return OP_1;
            }
          case 88: break;
          case 12: 
            { return OP_3;
            }
          case 89: break;
          case 13: 
            { return OP_4;
            }
          case 90: break;
          case 14: 
            { return OP_5;
            }
          case 91: break;
          case 15: 
            { return STRING;
            }
          case 92: break;
          case 16: 
            { return MAP;
            }
          case 93: break;
          case 17: 
            { return END;
            }
          case 94: break;
          case 18: 
            { return MASK;
            }
          case 95: break;
          case 19: 
            { return NAME;
            }
          case 96: break;
          case 20: 
            { return DATA;
            }
          case 97: break;
          case 21: 
            { return DUMP;
            }
          case 98: break;
          case 22: 
            { return UNIT;
            }
          case 99: break;
          case 23: 
            { return TYPE;
            }
          case 100: break;
          case 24: 
            { return GRID;
            }
          case 101: break;
          case 25: 
            { return JOIN;
            }
          case 102: break;
          case 26: 
            { return TRUE;
            }
          case 103: break;
          case 27: 
            { return DEBUG;
            }
          case 104: break;
          case 28: 
            { return LAYER;
            }
          case 105: break;
          case 29: 
            { return CLASS;
            }
          case 106: break;
          case 30: 
            { return TITLE;
            }
          case 107: break;
          case 31: 
            { return GROUP;
            }
          case 108: break;
          case 32: 
            { return FALSE;
            }
          case 109: break;
          case 33: 
            { return PLUGIN;
            }
          case 110: break;
          case 34: 
            { return EXTENT;
            }
          case 111: break;
          case 35: 
            { return STATUS;
            }
          case 112: break;
          case 36: 
            { return FOOTER;
            }
          case 113: break;
          case 37: 
            { return FILTER;
            }
          case 114: break;
          case 38: 
            { return HEADER;
            }
          case 115: break;
          case 39: 
            { return CLUSTER;
            }
          case 116: break;
          case 40: 
            { return UTFDATA;
            }
          case 117: break;
          case 41: 
            { return UTFITEM;
            }
          case 118: break;
          case 42: 
            { return TILESRS;
            }
          case 119: break;
          case 43: 
            { return OFFSITE;
            }
          case 120: break;
          case 44: 
            { return FEATURE;
            }
          case 121: break;
          case 45: 
            { return METADATA;
            }
          case 122: break;
          case 46: 
            { return ENCODING;
            }
          case 123: break;
          case 47: 
            { return REQUIRES;
            }
          case 124: break;
          case 48: 
            { return TEMPLATE;
            }
          case 125: break;
          case 49: 
            { return TILEITEM;
            }
          case 126: break;
          case 50: 
            { return LABELITEM;
            }
          case 127: break;
          case 51: 
            { return CLASSITEM;
            }
          case 128: break;
          case 52: 
            { return COMPOSITE;
            }
          case 129: break;
          case 53: 
            { return STYLEITEM;
            }
          case 130: break;
          case 54: 
            { return SIZEUNITS;
            }
          case 131: break;
          case 55: 
            { return TRANSFORM;
            }
          case 132: break;
          case 56: 
            { return TOLERANCE;
            }
          case 133: break;
          case 57: 
            { return TILEINDEX;
            }
          case 134: break;
          case 58: 
            { return PROCESSING;
            }
          case 135: break;
          case 59: 
            { return PROJECTION;
            }
          case 136: break;
          case 60: 
            { return LABELCACHE;
            }
          case 137: break;
          case 61: 
            { return CLASSGROUP;
            }
          case 138: break;
          case 62: 
            { return CONNECTION;
            }
          case 139: break;
          case 63: 
            { return FILTERITEM;
            }
          case 140: break;
          case 64: 
            { return VALIDATION;
            }
          case 141: break;
          case 65: 
            { return MAXFEATURES;
            }
          case 142: break;
          case 66: 
            { return MAXGEOWIDTH;
            }
          case 143: break;
          case 67: 
            { return MINGEOWIDTH;
            }
          case 144: break;
          case 68: 
            { return MAXSCALEDENOM;
            }
          case 145: break;
          case 69: 
            { return MINSCALEDENOM;
            }
          case 146: break;
          case 70: 
            { return LABELREQUIRES;
            }
          case 147: break;
          case 71: 
            { return GEOMTRANSFORM;
            }
          case 148: break;
          case 72: 
            { return POSTLABELCACHE;
            }
          case 149: break;
          case 73: 
            { return CONNECTIONTYPE;
            }
          case 150: break;
          case 74: 
            { return TOLERANCEUNITS;
            }
          case 151: break;
          case 75: 
            { return SYMBOLSCALEDENOM;
            }
          case 152: break;
          case 76: 
            { return LABELMAXSCALEDENOM;
            }
          case 153: break;
          case 77: 
            { return LABELMINSCALEDENOM;
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
